#ContextPath,默认为"/"
#server.servlet.context-path=/youming
# THYMELEAF (ThymeleafAutoConfiguration)
# 是否开启缓存，开发时关闭(否则修改不能实时起效)，部署时打开.
spring.thymeleaf.cache=false
# 是否在呈现模板之前检查模板是否存在。
spring.thymeleaf.check-template=true
# 是否检查模板位置是否存在。
spring.thymeleaf.check-template-location=true
# 是否为Web框架启用Thymeleaf视图解析。
spring.thymeleaf.enabled=true
# 在SpringEL表达式中启用SpringEL编译器。
spring.thymeleaf.enable-spring-el-compiler=false
# 模板文件编码。
spring.thymeleaf.encoding=UTF-8
# 排除的视图文件列表，用逗号分隔
spring.thymeleaf.excluded-view-names=
# 模板模式：默认HTML5，严格校验模板文件；可以采用LEGACYHTML5 和 nekohtml依赖，不进行严格校验。除此外，thymeleaf还支持xml，text，javascript，css，raw等模板模式
spring.thymeleaf.mode=HTML
# 在构建URL时添加前缀以查看名称的前缀。
spring.thymeleaf.prefix=classpath:/templates
# 以逗号分隔的视图名称列表（允许的模式），它们应该是设置最大块大小时在CHUNKED模式下执行的唯一视图名称。
spring.thymeleaf.reactive.chunked-mode-view-nam=
# 以逗号分隔的视图名称列表（允许的模式），即使最大块大小已设置，也应在FULL模式下执行.es =
spring.thymeleaf.reactive.full-mode-view-names=
# 用于写入响应的最大数据缓冲区大小（以字节为单位）。
spring.thymeleaf.reactive.max-chunk-size=0
# 视图技术支持的媒体类型。
spring.thymeleaf.reactive.media-types=
# 写入HTTP响应的Content-Type值。
spring.thymeleaf.servlet.content-type=text/html
# 在构建URL时附加到视图名称的后缀。
spring.thymeleaf.suffix=.html
# 模板解析器的顺序。
spring.thymeleaf.template-resolver-order=
# 以逗号分隔的视图名称列表（允许的模式），不需要白名单的时候不要设置，留空会导致所有模板不能解析
#spring.thymeleaf.view-names=